
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  // previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // referentialIntegrity = "prisma"
}

model User {
  id           Int        @id @default(autoincrement())
  email        String
  username     String
  pwd          String
  profileUrl   String     @default("")
  lastLoggedIn DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  members      Member[]
  assignees    Assignee[]
  projects     Project[]
  comments     Comment[]
  issues       Issue[]
}

model Project {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(50)
  descr     String?    @db.VarChar(200)
  repo      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  lists     List[]
  members   Member[]
  assignees Assignee[]
}

model Member {
  id        Int      @id @default(autoincrement())
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model List {
  id        Int      @id @default(autoincrement())
  name      String   @default("unnamed list")
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  issues    Issue[]
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
}

model Issue {
  id         Int        @id @default(autoincrement())
  order      Int
  priority   Int
  type       Int
  summary    String     @db.VarChar(100)
  descr      String?    @db.VarChar(500)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  List       List?      @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId     Int
  User       User?      @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId Int
  comments   Comment[]
  assignees  Assignee[]
}

model Assignee {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  Issue     Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   Int
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  descr     String   @db.VarChar(200)
  createdAt DateTime @default(now())
  Issue     Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   Int
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int
}
